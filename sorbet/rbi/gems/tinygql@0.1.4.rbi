# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tinygql` gem.
# Please instead update this file by running `bin/tapioca gem tinygql`.

# source://tinygql//lib/tinygql/lexer.rb#5
module TinyGQL
  class << self
    # source://tinygql//lib/tinygql.rb#7
    def parse(doc); end
  end
end

# source://tinygql//lib/tinygql/lexer.rb#6
class TinyGQL::Lexer
  include ::TinyGQL::Lexer::Literals

  # @return [Lexer] a new instance of Lexer
  #
  # source://tinygql//lib/tinygql/lexer.rb#90
  def initialize(string); end

  # source://tinygql//lib/tinygql/lexer.rb#106
  def advance; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/lexer.rb#102
  def done?; end

  # source://tinygql//lib/tinygql/lexer.rb#123
  def emit(token_name, token_value); end

  # source://tinygql//lib/tinygql/lexer.rb#173
  def emit_block(value); end

  # source://tinygql//lib/tinygql/lexer.rb#178
  def emit_string(value); end

  # source://tinygql//lib/tinygql/lexer.rb#98
  def line; end

  # source://tinygql//lib/tinygql/lexer.rb#129
  def next_token; end

  # Replace any escaped unicode or whitespace with the _actual_ characters
  # To avoid allocating more strings, this modifies the string passed into it
  #
  # source://tinygql//lib/tinygql/lexer.rb#135
  def replace_escaped_characters_in_place(raw_string); end

  # Returns the value of attribute token_name.
  #
  # source://tinygql//lib/tinygql/lexer.rb#121
  def token_name; end

  # Returns the value of attribute token_value.
  #
  # source://tinygql//lib/tinygql/lexer.rb#121
  def token_value; end

  # source://tinygql//lib/tinygql/lexer.rb#192
  def trim_whitespace(str); end
end

# source://tinygql//lib/tinygql/lexer.rb#67
TinyGQL::Lexer::BLOCK_QUOTE = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#78
TinyGQL::Lexer::BLOCK_STRING = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#68
TinyGQL::Lexer::ESCAPED_QUOTE = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#159
TinyGQL::Lexer::ESCAPES = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#160
TinyGQL::Lexer::ESCAPES_REPLACE = T.let(T.unsafe(nil), Hash)

# source://tinygql//lib/tinygql/lexer.rb#15
TinyGQL::Lexer::FLOAT_DECIMAL = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#16
TinyGQL::Lexer::FLOAT_EXP = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#62
TinyGQL::Lexer::FOUR_DIGIT_UNICODE = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#7
TinyGQL::Lexer::IDENTIFIER = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#8
TinyGQL::Lexer::IGNORE = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#14
TinyGQL::Lexer::INT = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#19
TinyGQL::Lexer::KEYWORDS = T.let(T.unsafe(nil), Hash)

# source://tinygql//lib/tinygql/lexer.rb#75
TinyGQL::Lexer::LIT = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#71
TinyGQL::Lexer::LIT_NAME_LUT = T.let(T.unsafe(nil), Hash)

# source://tinygql//lib/tinygql/lexer.rb#41
module TinyGQL::Lexer::Literals; end

# source://tinygql//lib/tinygql/lexer.rb#55
TinyGQL::Lexer::Literals::AMP = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#53
TinyGQL::Lexer::Literals::BANG = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#48
TinyGQL::Lexer::Literals::COLON = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#50
TinyGQL::Lexer::Literals::DIR_SIGN = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#51
TinyGQL::Lexer::Literals::ELLIPSIS = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#52
TinyGQL::Lexer::Literals::EQUALS = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#46
TinyGQL::Lexer::Literals::LBRACKET = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#42
TinyGQL::Lexer::Literals::LCURLY = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#44
TinyGQL::Lexer::Literals::LPAREN = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#54
TinyGQL::Lexer::Literals::PIPE = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#47
TinyGQL::Lexer::Literals::RBRACKET = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#43
TinyGQL::Lexer::Literals::RCURLY = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#45
TinyGQL::Lexer::Literals::RPAREN = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#49
TinyGQL::Lexer::Literals::VAR_SIGN = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#17
TinyGQL::Lexer::NUMERIC = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#63
TinyGQL::Lexer::N_DIGIT_UNICODE = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#60
TinyGQL::Lexer::QUOTE = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/lexer.rb#77
TinyGQL::Lexer::QUOTED_STRING = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#69
TinyGQL::Lexer::STRING_CHAR = T.let(T.unsafe(nil), Regexp)

# # https://graphql.github.io/graphql-spec/June2018/#sec-String-Value
#
# source://tinygql//lib/tinygql/lexer.rb#66
TinyGQL::Lexer::STRING_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#61
TinyGQL::Lexer::UNICODE_DIGIT = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#64
TinyGQL::Lexer::UNICODE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#170
TinyGQL::Lexer::UTF_8 = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/lexer.rb#171
TinyGQL::Lexer::VALID_STRING = T.let(T.unsafe(nil), Regexp)

# source://tinygql//lib/tinygql/nodes.rb#2
module TinyGQL::Nodes; end

# source://tinygql//lib/tinygql/nodes.rb#230
class TinyGQL::Nodes::Argument < ::TinyGQL::Nodes::Node
  # @return [Argument] a new instance of Argument
  #
  # source://tinygql//lib/tinygql/nodes.rb#233
  def initialize(name, value); end

  # source://tinygql//lib/tinygql/nodes.rb#238
  def accept(viz); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#246
  def argument?; end

  # source://tinygql//lib/tinygql/nodes.rb#248
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#242
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#231
  def name; end

  # Returns the value of attribute value.
  #
  # source://tinygql//lib/tinygql/nodes.rb#231
  def value; end
end

# source://tinygql//lib/tinygql/nodes.rb#338
class TinyGQL::Nodes::BooleanValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#340
  def accept(viz); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#348
  def boolean_value?; end

  # source://tinygql//lib/tinygql/nodes.rb#344
  def fold(viz, seed); end
end

# source://tinygql//lib/tinygql/nodes.rb#411
class TinyGQL::Nodes::Directive < ::TinyGQL::Nodes::Node
  # @return [Directive] a new instance of Directive
  #
  # source://tinygql//lib/tinygql/nodes.rb#414
  def initialize(name, arguments); end

  # source://tinygql//lib/tinygql/nodes.rb#419
  def accept(viz); end

  # Returns the value of attribute arguments.
  #
  # source://tinygql//lib/tinygql/nodes.rb#412
  def arguments; end

  # source://tinygql//lib/tinygql/nodes.rb#429
  def children; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#427
  def directive?; end

  # source://tinygql//lib/tinygql/nodes.rb#423
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#412
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#851
class TinyGQL::Nodes::DirectiveDefinition < ::TinyGQL::Nodes::Node
  # @return [DirectiveDefinition] a new instance of DirectiveDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#854
  def initialize(description, name, arguments_definition, directive_locations); end

  # source://tinygql//lib/tinygql/nodes.rb#861
  def accept(viz); end

  # Returns the value of attribute arguments_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#852
  def arguments_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#871
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#852
  def description; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#869
  def directive_definition?; end

  # Returns the value of attribute directive_locations.
  #
  # source://tinygql//lib/tinygql/nodes.rb#852
  def directive_locations; end

  # source://tinygql//lib/tinygql/nodes.rb#865
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#852
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#56
class TinyGQL::Nodes::Document < ::TinyGQL::Nodes::Node
  # @return [Document] a new instance of Document
  #
  # source://tinygql//lib/tinygql/nodes.rb#59
  def initialize(definitions); end

  # source://tinygql//lib/tinygql/nodes.rb#63
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#73
  def children; end

  # Returns the value of attribute definitions.
  #
  # source://tinygql//lib/tinygql/nodes.rb#57
  def definitions; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#71
  def document?; end

  # source://tinygql//lib/tinygql/nodes.rb#67
  def fold(viz, seed); end
end

# source://tinygql//lib/tinygql/nodes.rb#737
class TinyGQL::Nodes::EnumTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [EnumTypeDefinition] a new instance of EnumTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#740
  def initialize(description, name, directives, enum_value_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#747
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#757
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#738
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#738
  def directives; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#755
  def enum_type_definition?; end

  # Returns the value of attribute enum_value_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#738
  def enum_value_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#751
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#738
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#944
class TinyGQL::Nodes::EnumTypeExtension < ::TinyGQL::Nodes::Node
  # @return [EnumTypeExtension] a new instance of EnumTypeExtension
  #
  # source://tinygql//lib/tinygql/nodes.rb#947
  def initialize(name, directives, enum_value_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#953
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#963
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#945
  def directives; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#961
  def enum_type_extension?; end

  # Returns the value of attribute enum_value_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#945
  def enum_value_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#957
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#945
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#364
class TinyGQL::Nodes::EnumValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#366
  def accept(viz); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#374
  def enum_value?; end

  # source://tinygql//lib/tinygql/nodes.rb#370
  def fold(viz, seed); end
end

# source://tinygql//lib/tinygql/nodes.rb#714
class TinyGQL::Nodes::EnumValueDefinition < ::TinyGQL::Nodes::Node
  # @return [EnumValueDefinition] a new instance of EnumValueDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#717
  def initialize(description, enum_value, directives); end

  # source://tinygql//lib/tinygql/nodes.rb#723
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#733
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#715
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#715
  def directives; end

  # Returns the value of attribute enum_value.
  #
  # source://tinygql//lib/tinygql/nodes.rb#715
  def enum_value; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#731
  def enum_value_definition?; end

  # source://tinygql//lib/tinygql/nodes.rb#727
  def fold(viz, seed); end
end

# source://tinygql//lib/tinygql/nodes.rb#809
class TinyGQL::Nodes::ExecutableDirectiveLocation < ::TinyGQL::Nodes::Node
  # @return [ExecutableDirectiveLocation] a new instance of ExecutableDirectiveLocation
  #
  # source://tinygql//lib/tinygql/nodes.rb#812
  def initialize(name); end

  # source://tinygql//lib/tinygql/nodes.rb#816
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#826
  def children; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#824
  def executable_directive_location?; end

  # source://tinygql//lib/tinygql/nodes.rb#820
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#810
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#252
class TinyGQL::Nodes::Field < ::TinyGQL::Nodes::Node
  # @return [Field] a new instance of Field
  #
  # source://tinygql//lib/tinygql/nodes.rb#255
  def initialize(aliaz, name, arguments, directives, selection_set); end

  # source://tinygql//lib/tinygql/nodes.rb#263
  def accept(viz); end

  # Returns the value of attribute aliaz.
  #
  # source://tinygql//lib/tinygql/nodes.rb#253
  def aliaz; end

  # Returns the value of attribute arguments.
  #
  # source://tinygql//lib/tinygql/nodes.rb#253
  def arguments; end

  # source://tinygql//lib/tinygql/nodes.rb#273
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#253
  def directives; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#271
  def field?; end

  # source://tinygql//lib/tinygql/nodes.rb#267
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#253
  def name; end

  # Returns the value of attribute selection_set.
  #
  # source://tinygql//lib/tinygql/nodes.rb#253
  def selection_set; end
end

# source://tinygql//lib/tinygql/nodes.rb#568
class TinyGQL::Nodes::FieldDefinition < ::TinyGQL::Nodes::Node
  # @return [FieldDefinition] a new instance of FieldDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#571
  def initialize(description, name, arguments_definition, type, directives); end

  # source://tinygql//lib/tinygql/nodes.rb#579
  def accept(viz); end

  # Returns the value of attribute arguments_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#569
  def arguments_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#589
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#569
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#569
  def directives; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#587
  def field_definition?; end

  # source://tinygql//lib/tinygql/nodes.rb#583
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#569
  def name; end

  # Returns the value of attribute type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#569
  def type; end
end

# source://tinygql//lib/tinygql/nodes.rb#312
class TinyGQL::Nodes::FloatValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#314
  def accept(viz); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#322
  def float_value?; end

  # source://tinygql//lib/tinygql/nodes.rb#318
  def fold(viz, seed); end
end

# source://tinygql//lib/tinygql/nodes.rb#499
class TinyGQL::Nodes::FragmentDefinition < ::TinyGQL::Nodes::Node
  # @return [FragmentDefinition] a new instance of FragmentDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#502
  def initialize(fragment_name, type_condition, directives, selection_set); end

  # source://tinygql//lib/tinygql/nodes.rb#509
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#519
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#500
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#513
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#517
  def fragment_definition?; end

  # Returns the value of attribute fragment_name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#500
  def fragment_name; end

  # Returns the value of attribute selection_set.
  #
  # source://tinygql//lib/tinygql/nodes.rb#500
  def selection_set; end

  # Returns the value of attribute type_condition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#500
  def type_condition; end
end

# source://tinygql//lib/tinygql/nodes.rb#477
class TinyGQL::Nodes::FragmentSpread < ::TinyGQL::Nodes::Node
  # @return [FragmentSpread] a new instance of FragmentSpread
  #
  # source://tinygql//lib/tinygql/nodes.rb#480
  def initialize(fragment_name, directives); end

  # source://tinygql//lib/tinygql/nodes.rb#485
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#495
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#478
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#489
  def fold(viz, seed); end

  # Returns the value of attribute fragment_name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#478
  def fragment_name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#493
  def fragment_spread?; end
end

# source://tinygql//lib/tinygql/nodes.rb#454
class TinyGQL::Nodes::InlineFragment < ::TinyGQL::Nodes::Node
  # @return [InlineFragment] a new instance of InlineFragment
  #
  # source://tinygql//lib/tinygql/nodes.rb#457
  def initialize(type_condition, directives, selection_set); end

  # source://tinygql//lib/tinygql/nodes.rb#463
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#473
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#455
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#467
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#471
  def inline_fragment?; end

  # Returns the value of attribute selection_set.
  #
  # source://tinygql//lib/tinygql/nodes.rb#455
  def selection_set; end

  # Returns the value of attribute type_condition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#455
  def type_condition; end
end

# source://tinygql//lib/tinygql/nodes.rb#761
class TinyGQL::Nodes::InputObjectTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [InputObjectTypeDefinition] a new instance of InputObjectTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#764
  def initialize(description, name, directives, input_fields_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#771
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#781
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#762
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#762
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#775
  def fold(viz, seed); end

  # Returns the value of attribute input_fields_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#762
  def input_fields_definition; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#779
  def input_object_type_definition?; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#762
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#967
class TinyGQL::Nodes::InputObjectTypeExtension < ::TinyGQL::Nodes::Node
  # @return [InputObjectTypeExtension] a new instance of InputObjectTypeExtension
  #
  # source://tinygql//lib/tinygql/nodes.rb#970
  def initialize(name, directives, input_fields_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#976
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#986
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#968
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#980
  def fold(viz, seed); end

  # Returns the value of attribute input_fields_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#968
  def input_fields_definition; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#984
  def input_object_type_extension?; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#968
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#593
class TinyGQL::Nodes::InputValueDefinition < ::TinyGQL::Nodes::Node
  # @return [InputValueDefinition] a new instance of InputValueDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#596
  def initialize(description, name, type, default_value, directives); end

  # source://tinygql//lib/tinygql/nodes.rb#604
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#614
  def children; end

  # Returns the value of attribute default_value.
  #
  # source://tinygql//lib/tinygql/nodes.rb#594
  def default_value; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#594
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#594
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#608
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#612
  def input_value_definition?; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#594
  def name; end

  # Returns the value of attribute type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#594
  def type; end
end

# source://tinygql//lib/tinygql/nodes.rb#299
class TinyGQL::Nodes::IntValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#301
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#305
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#309
  def int_value?; end
end

# source://tinygql//lib/tinygql/nodes.rb#643
class TinyGQL::Nodes::InterfaceTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [InterfaceTypeDefinition] a new instance of InterfaceTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#646
  def initialize(description, name, directives, fields_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#653
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#663
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#644
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#644
  def directives; end

  # Returns the value of attribute fields_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#644
  def fields_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#657
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#661
  def interface_type_definition?; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#644
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#897
class TinyGQL::Nodes::InterfaceTypeExtension < ::TinyGQL::Nodes::Node
  # @return [InterfaceTypeExtension] a new instance of InterfaceTypeExtension
  #
  # source://tinygql//lib/tinygql/nodes.rb#900
  def initialize(name, implements_interfaces, directives, fields_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#907
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#917
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#898
  def directives; end

  # Returns the value of attribute fields_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#898
  def fields_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#911
  def fold(viz, seed); end

  # Returns the value of attribute implements_interfaces.
  #
  # source://tinygql//lib/tinygql/nodes.rb#898
  def implements_interfaces; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#915
  def interface_type_extension?; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#898
  def name; end
end

# source://tinygql//lib/tinygql/nodes.rb#165
class TinyGQL::Nodes::ListType < ::TinyGQL::Nodes::Node
  # @return [ListType] a new instance of ListType
  #
  # source://tinygql//lib/tinygql/nodes.rb#168
  def initialize(type); end

  # source://tinygql//lib/tinygql/nodes.rb#172
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#182
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#176
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#180
  def list_type?; end

  # Returns the value of attribute type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#166
  def type; end
end

# source://tinygql//lib/tinygql/nodes.rb#377
class TinyGQL::Nodes::ListValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#379
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#383
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#387
  def list_value?; end
end

# source://tinygql//lib/tinygql/nodes.rb#123
class TinyGQL::Nodes::NamedType < ::TinyGQL::Nodes::Node
  # @return [NamedType] a new instance of NamedType
  #
  # source://tinygql//lib/tinygql/nodes.rb#126
  def initialize(name); end

  # source://tinygql//lib/tinygql/nodes.rb#130
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#140
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#134
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#124
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#138
  def named_type?; end
end

# source://tinygql//lib/tinygql/nodes.rb#3
class TinyGQL::Nodes::Node
  include ::Enumerable

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#14
  def argument?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#20
  def boolean_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#25
  def directive?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#44
  def directive_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#6
  def document?; end

  # @yield [_self]
  # @yieldparam _self [TinyGQL::Nodes::Node] the object that the method was called on
  #
  # source://tinygql//lib/tinygql/nodes.rb#50
  def each(&blk); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#39
  def enum_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#48
  def enum_type_extension?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#22
  def enum_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#38
  def enum_value_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#42
  def executable_directive_location?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#15
  def field?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#32
  def field_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#18
  def float_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#29
  def fragment_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#28
  def fragment_spread?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#27
  def inline_fragment?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#40
  def input_object_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#49
  def input_object_type_extension?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#33
  def input_value_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#17
  def int_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#35
  def interface_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#46
  def interface_type_extension?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#11
  def list_type?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#23
  def list_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#9
  def named_type?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#10
  def not_null_type?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#21
  def null_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#16
  def object_field?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#34
  def object_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#41
  def object_type_extension?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#24
  def object_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#7
  def operation_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#30
  def root_operation_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#37
  def scalar_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#45
  def scalar_type_extension?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#31
  def schema_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#19
  def string_value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#26
  def type_condition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#43
  def type_system_directive_location?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#36
  def union_type_definition?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#47
  def union_type_extension?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#13
  def value?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#8
  def variable?; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#12
  def variable_definition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#144
class TinyGQL::Nodes::NotNullType < ::TinyGQL::Nodes::Node
  # @return [NotNullType] a new instance of NotNullType
  #
  # source://tinygql//lib/tinygql/nodes.rb#147
  def initialize(type); end

  # source://tinygql//lib/tinygql/nodes.rb#151
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#161
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#155
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#159
  def not_null_type?; end

  # Returns the value of attribute type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#145
  def type; end
end

# source://tinygql//lib/tinygql/nodes.rb#351
class TinyGQL::Nodes::NullValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#353
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#357
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#361
  def null_value?; end
end

# source://tinygql//lib/tinygql/nodes.rb#277
class TinyGQL::Nodes::ObjectField < ::TinyGQL::Nodes::Node
  # @return [ObjectField] a new instance of ObjectField
  #
  # source://tinygql//lib/tinygql/nodes.rb#280
  def initialize(name, value); end

  # source://tinygql//lib/tinygql/nodes.rb#285
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#295
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#289
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#278
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#293
  def object_field?; end

  # Returns the value of attribute value.
  #
  # source://tinygql//lib/tinygql/nodes.rb#278
  def value; end
end

# source://tinygql//lib/tinygql/nodes.rb#618
class TinyGQL::Nodes::ObjectTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [ObjectTypeDefinition] a new instance of ObjectTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#621
  def initialize(description, name, implements_interfaces, directives, fields_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#629
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#639
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#619
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#619
  def directives; end

  # Returns the value of attribute fields_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#619
  def fields_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#633
  def fold(viz, seed); end

  # Returns the value of attribute implements_interfaces.
  #
  # source://tinygql//lib/tinygql/nodes.rb#619
  def implements_interfaces; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#619
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#637
  def object_type_definition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#785
class TinyGQL::Nodes::ObjectTypeExtension < ::TinyGQL::Nodes::Node
  # @return [ObjectTypeExtension] a new instance of ObjectTypeExtension
  #
  # source://tinygql//lib/tinygql/nodes.rb#788
  def initialize(name, implements_interfaces, directives, fields_definition); end

  # source://tinygql//lib/tinygql/nodes.rb#795
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#805
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#786
  def directives; end

  # Returns the value of attribute fields_definition.
  #
  # source://tinygql//lib/tinygql/nodes.rb#786
  def fields_definition; end

  # source://tinygql//lib/tinygql/nodes.rb#799
  def fold(viz, seed); end

  # Returns the value of attribute implements_interfaces.
  #
  # source://tinygql//lib/tinygql/nodes.rb#786
  def implements_interfaces; end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#786
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#803
  def object_type_extension?; end
end

# source://tinygql//lib/tinygql/nodes.rb#390
class TinyGQL::Nodes::ObjectValue < ::TinyGQL::Nodes::Node
  # @return [ObjectValue] a new instance of ObjectValue
  #
  # source://tinygql//lib/tinygql/nodes.rb#393
  def initialize(values); end

  # source://tinygql//lib/tinygql/nodes.rb#397
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#407
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#401
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#405
  def object_value?; end

  # Returns the value of attribute values.
  #
  # source://tinygql//lib/tinygql/nodes.rb#391
  def values; end
end

# source://tinygql//lib/tinygql/nodes.rb#77
class TinyGQL::Nodes::OperationDefinition < ::TinyGQL::Nodes::Node
  # @return [OperationDefinition] a new instance of OperationDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#80
  def initialize(type, name, variable_definitions, directives, selection_set); end

  # source://tinygql//lib/tinygql/nodes.rb#88
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#98
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#78
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#92
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#78
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#96
  def operation_definition?; end

  # Returns the value of attribute selection_set.
  #
  # source://tinygql//lib/tinygql/nodes.rb#78
  def selection_set; end

  # Returns the value of attribute type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#78
  def type; end

  # Returns the value of attribute variable_definitions.
  #
  # source://tinygql//lib/tinygql/nodes.rb#78
  def variable_definitions; end
end

# source://tinygql//lib/tinygql/nodes.rb#523
class TinyGQL::Nodes::RootOperationTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [RootOperationTypeDefinition] a new instance of RootOperationTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#526
  def initialize(operation_type, named_type); end

  # source://tinygql//lib/tinygql/nodes.rb#531
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#541
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#535
  def fold(viz, seed); end

  # Returns the value of attribute named_type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#524
  def named_type; end

  # Returns the value of attribute operation_type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#524
  def operation_type; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#539
  def root_operation_type_definition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#691
class TinyGQL::Nodes::ScalarTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [ScalarTypeDefinition] a new instance of ScalarTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#694
  def initialize(description, name, directives); end

  # source://tinygql//lib/tinygql/nodes.rb#700
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#710
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#692
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#692
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#704
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#692
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#708
  def scalar_type_definition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#875
class TinyGQL::Nodes::ScalarTypeExtension < ::TinyGQL::Nodes::Node
  # @return [ScalarTypeExtension] a new instance of ScalarTypeExtension
  #
  # source://tinygql//lib/tinygql/nodes.rb#878
  def initialize(name, directives); end

  # source://tinygql//lib/tinygql/nodes.rb#883
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#893
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#876
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#887
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#876
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#891
  def scalar_type_extension?; end
end

# source://tinygql//lib/tinygql/nodes.rb#545
class TinyGQL::Nodes::SchemaDefinition < ::TinyGQL::Nodes::Node
  # @return [SchemaDefinition] a new instance of SchemaDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#548
  def initialize(description, directives, root_operation_definitions); end

  # source://tinygql//lib/tinygql/nodes.rb#554
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#564
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#546
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#546
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#558
  def fold(viz, seed); end

  # Returns the value of attribute root_operation_definitions.
  #
  # source://tinygql//lib/tinygql/nodes.rb#546
  def root_operation_definitions; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#562
  def schema_definition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#325
class TinyGQL::Nodes::StringValue < ::TinyGQL::Nodes::Value
  # source://tinygql//lib/tinygql/nodes.rb#327
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#331
  def fold(viz, seed); end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#335
  def string_value?; end
end

# source://tinygql//lib/tinygql/nodes.rb#433
class TinyGQL::Nodes::TypeCondition < ::TinyGQL::Nodes::Node
  # @return [TypeCondition] a new instance of TypeCondition
  #
  # source://tinygql//lib/tinygql/nodes.rb#436
  def initialize(named_type); end

  # source://tinygql//lib/tinygql/nodes.rb#440
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#450
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#444
  def fold(viz, seed); end

  # Returns the value of attribute named_type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#434
  def named_type; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#448
  def type_condition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#830
class TinyGQL::Nodes::TypeSystemDirectiveLocation < ::TinyGQL::Nodes::Node
  # @return [TypeSystemDirectiveLocation] a new instance of TypeSystemDirectiveLocation
  #
  # source://tinygql//lib/tinygql/nodes.rb#833
  def initialize(name); end

  # source://tinygql//lib/tinygql/nodes.rb#837
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#847
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#841
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#831
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#845
  def type_system_directive_location?; end
end

# source://tinygql//lib/tinygql/nodes.rb#667
class TinyGQL::Nodes::UnionTypeDefinition < ::TinyGQL::Nodes::Node
  # @return [UnionTypeDefinition] a new instance of UnionTypeDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#670
  def initialize(description, name, directives, union_member_types); end

  # source://tinygql//lib/tinygql/nodes.rb#677
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#687
  def children; end

  # Returns the value of attribute description.
  #
  # source://tinygql//lib/tinygql/nodes.rb#668
  def description; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#668
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#681
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#668
  def name; end

  # Returns the value of attribute union_member_types.
  #
  # source://tinygql//lib/tinygql/nodes.rb#668
  def union_member_types; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#685
  def union_type_definition?; end
end

# source://tinygql//lib/tinygql/nodes.rb#921
class TinyGQL::Nodes::UnionTypeExtension < ::TinyGQL::Nodes::Node
  # @return [UnionTypeExtension] a new instance of UnionTypeExtension
  #
  # source://tinygql//lib/tinygql/nodes.rb#924
  def initialize(name, directives, union_member_types); end

  # source://tinygql//lib/tinygql/nodes.rb#930
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#940
  def children; end

  # Returns the value of attribute directives.
  #
  # source://tinygql//lib/tinygql/nodes.rb#922
  def directives; end

  # source://tinygql//lib/tinygql/nodes.rb#934
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#922
  def name; end

  # Returns the value of attribute union_member_types.
  #
  # source://tinygql//lib/tinygql/nodes.rb#922
  def union_member_types; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#938
  def union_type_extension?; end
end

# source://tinygql//lib/tinygql/nodes.rb#209
class TinyGQL::Nodes::Value < ::TinyGQL::Nodes::Node
  # @return [Value] a new instance of Value
  #
  # source://tinygql//lib/tinygql/nodes.rb#212
  def initialize(value); end

  # source://tinygql//lib/tinygql/nodes.rb#216
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#226
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#220
  def fold(viz, seed); end

  # Returns the value of attribute value.
  #
  # source://tinygql//lib/tinygql/nodes.rb#210
  def value; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#224
  def value?; end
end

# source://tinygql//lib/tinygql/nodes.rb#102
class TinyGQL::Nodes::Variable < ::TinyGQL::Nodes::Node
  # @return [Variable] a new instance of Variable
  #
  # source://tinygql//lib/tinygql/nodes.rb#105
  def initialize(name); end

  # source://tinygql//lib/tinygql/nodes.rb#109
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#119
  def children; end

  # source://tinygql//lib/tinygql/nodes.rb#113
  def fold(viz, seed); end

  # Returns the value of attribute name.
  #
  # source://tinygql//lib/tinygql/nodes.rb#103
  def name; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#117
  def variable?; end
end

# source://tinygql//lib/tinygql/nodes.rb#186
class TinyGQL::Nodes::VariableDefinition < ::TinyGQL::Nodes::Node
  # @return [VariableDefinition] a new instance of VariableDefinition
  #
  # source://tinygql//lib/tinygql/nodes.rb#189
  def initialize(variable, type, default_value); end

  # source://tinygql//lib/tinygql/nodes.rb#195
  def accept(viz); end

  # source://tinygql//lib/tinygql/nodes.rb#205
  def children; end

  # Returns the value of attribute default_value.
  #
  # source://tinygql//lib/tinygql/nodes.rb#187
  def default_value; end

  # source://tinygql//lib/tinygql/nodes.rb#199
  def fold(viz, seed); end

  # Returns the value of attribute type.
  #
  # source://tinygql//lib/tinygql/nodes.rb#187
  def type; end

  # Returns the value of attribute variable.
  #
  # source://tinygql//lib/tinygql/nodes.rb#187
  def variable; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/nodes.rb#203
  def variable_definition?; end
end

# source://tinygql//lib/tinygql/parser.rb#7
class TinyGQL::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://tinygql//lib/tinygql/parser.rb#14
  def initialize(doc); end

  # source://tinygql//lib/tinygql/parser.rb#20
  def parse; end

  private

  # source://tinygql//lib/tinygql/parser.rb#613
  def accept_token; end

  # Only use when we care about the accepted token's value
  #
  # source://tinygql//lib/tinygql/parser.rb#619
  def accept_token_value; end

  # source://tinygql//lib/tinygql/parser.rb#481
  def argument; end

  # source://tinygql//lib/tinygql/parser.rb#471
  def arguments; end

  # source://tinygql//lib/tinygql/parser.rb#287
  def arguments_definition; end

  # @return [Boolean]
  #
  # source://tinygql//lib/tinygql/parser.rb#648
  def at?(tok); end

  # source://tinygql//lib/tinygql/parser.rb#567
  def boolean_value; end

  # source://tinygql//lib/tinygql/parser.rb#508
  def default_value; end

  # source://tinygql//lib/tinygql/parser.rb#40
  def definition; end

  # source://tinygql//lib/tinygql/parser.rb#32
  def definition_list; end

  # source://tinygql//lib/tinygql/parser.rb#461
  def directive; end

  # source://tinygql//lib/tinygql/parser.rb#125
  def directive_defintion(desc); end

  # source://tinygql//lib/tinygql/parser.rb#144
  def directive_location; end

  # source://tinygql//lib/tinygql/parser.rb#135
  def directive_locations; end

  # source://tinygql//lib/tinygql/parser.rb#453
  def directives; end

  # source://tinygql//lib/tinygql/parser.rb#28
  def document; end

  # source://tinygql//lib/tinygql/parser.rb#198
  def enum_type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#75
  def enum_type_extension; end

  # source://tinygql//lib/tinygql/parser.rb#551
  def enum_value; end

  # source://tinygql//lib/tinygql/parser.rb#216
  def enum_value_definition; end

  # source://tinygql//lib/tinygql/parser.rb#206
  def enum_values_definition; end

  # source://tinygql//lib/tinygql/parser.rb#338
  def executable_definition; end

  # source://tinygql//lib/tinygql/parser.rb#625
  def expect_token(tok); end

  # Only use when we care about the expected token's value
  #
  # source://tinygql//lib/tinygql/parser.rb#633
  def expect_token_value(tok); end

  # source://tinygql//lib/tinygql/parser.rb#639
  def expect_tokens(toks); end

  # source://tinygql//lib/tinygql/parser.rb#431
  def field; end

  # source://tinygql//lib/tinygql/parser.rb#276
  def field_definition; end

  # source://tinygql//lib/tinygql/parser.rb#266
  def fields_definition; end

  # source://tinygql//lib/tinygql/parser.rb#555
  def float_value; end

  # source://tinygql//lib/tinygql/parser.rb#346
  def fragment_definition; end

  # source://tinygql//lib/tinygql/parser.rb#405
  def fragment_spread; end

  # source://tinygql//lib/tinygql/parser.rb#307
  def implements_interfaces; end

  # source://tinygql//lib/tinygql/parser.rb#414
  def inline_fragment; end

  # source://tinygql//lib/tinygql/parser.rb#188
  def input_fields_definition; end

  # source://tinygql//lib/tinygql/parser.rb#180
  def input_object_type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#67
  def input_object_type_extension; end

  # source://tinygql//lib/tinygql/parser.rb#297
  def input_value_definition; end

  # source://tinygql//lib/tinygql/parser.rb#559
  def int_value; end

  # source://tinygql//lib/tinygql/parser.rb#248
  def interface_type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#91
  def interface_type_extension; end

  # source://tinygql//lib/tinygql/parser.rb#588
  def list_type; end

  # source://tinygql//lib/tinygql/parser.rb#541
  def list_value; end

  # source://tinygql//lib/tinygql/parser.rb#605
  def name; end

  # source://tinygql//lib/tinygql/parser.rb#595
  def named_type; end

  # source://tinygql//lib/tinygql/parser.rb#571
  def null_value; end

  # source://tinygql//lib/tinygql/parser.rb#256
  def object_type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#107
  def object_type_extension; end

  # source://tinygql//lib/tinygql/parser.rb#529
  def object_value; end

  # source://tinygql//lib/tinygql/parser.rb#358
  def operation_definition; end

  # source://tinygql//lib/tinygql/parser.rb#449
  def operation_type; end

  # source://tinygql//lib/tinygql/parser.rb#328
  def root_operation_type_definition; end

  # source://tinygql//lib/tinygql/parser.rb#223
  def scalar_type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#100
  def scalar_type_extension; end

  # source://tinygql//lib/tinygql/parser.rb#318
  def schema_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#386
  def selection; end

  # source://tinygql//lib/tinygql/parser.rb#394
  def selection_fragment; end

  # source://tinygql//lib/tinygql/parser.rb#376
  def selection_set; end

  # source://tinygql//lib/tinygql/parser.rb#563
  def string_value; end

  # Returns the value of attribute token_name.
  #
  # source://tinygql//lib/tinygql/parser.rb#26
  def token_name; end

  # source://tinygql//lib/tinygql/parser.rb#575
  def type; end

  # source://tinygql//lib/tinygql/parser.rb#426
  def type_condition; end

  # source://tinygql//lib/tinygql/parser.rb#167
  def type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#116
  def type_system_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#53
  def type_system_extension; end

  # source://tinygql//lib/tinygql/parser.rb#238
  def union_member_types; end

  # source://tinygql//lib/tinygql/parser.rb#230
  def union_type_definition(desc); end

  # source://tinygql//lib/tinygql/parser.rb#83
  def union_type_extension; end

  # source://tinygql//lib/tinygql/parser.rb#513
  def value; end

  # source://tinygql//lib/tinygql/parser.rb#599
  def variable; end

  # source://tinygql//lib/tinygql/parser.rb#497
  def variable_definition; end

  # source://tinygql//lib/tinygql/parser.rb#487
  def variable_definitions; end

  class << self
    # source://tinygql//lib/tinygql/parser.rb#10
    def parse(doc); end
  end
end

# source://tinygql//lib/tinygql/parser.rb#8
class TinyGQL::Parser::UnexpectedToken < ::StandardError; end

# source://tinygql//lib/tinygql/version.rb#2
TinyGQL::VERSION = T.let(T.unsafe(nil), String)

# source://tinygql//lib/tinygql/visitors.rb#2
module TinyGQL::Visitors; end

# source://tinygql//lib/tinygql/visitors.rb#212
module TinyGQL::Visitors::Fold
  # source://tinygql//lib/tinygql/visitors.rb#255
  def handle_argument(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#284
  def handle_boolean_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#305
  def handle_directive(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#426
  def handle_directive_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#214
  def handle_document(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#397
  def handle_enum_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#451
  def handle_enum_type_extension(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#292
  def handle_enum_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#390
  def handle_enum_value_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#418
  def handle_executable_directive_location(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#260
  def handle_field(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#346
  def handle_field_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#276
  def handle_float_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#327
  def handle_fragment_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#322
  def handle_fragment_spread(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#315
  def handle_inline_fragment(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#404
  def handle_input_object_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#457
  def handle_input_object_type_extension(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#354
  def handle_input_value_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#272
  def handle_int_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#370
  def handle_interface_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#438
  def handle_interface_type_extension(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#239
  def handle_list_type(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#296
  def handle_list_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#230
  def handle_named_type(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#234
  def handle_not_null_type(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#288
  def handle_null_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#267
  def handle_object_field(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#362
  def handle_object_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#411
  def handle_object_type_extension(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#300
  def handle_object_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#219
  def handle_operation_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#334
  def handle_root_operation_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#384
  def handle_scalar_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#433
  def handle_scalar_type_extension(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#339
  def handle_schema_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#280
  def handle_string_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#310
  def handle_type_condition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#422
  def handle_type_system_directive_location(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#377
  def handle_union_type_definition(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#445
  def handle_union_type_extension(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#251
  def handle_value(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#226
  def handle_variable(obj, seed); end

  # source://tinygql//lib/tinygql/visitors.rb#244
  def handle_variable_definition(obj, seed); end
end

# source://tinygql//lib/tinygql/visitors.rb#3
module TinyGQL::Visitors::Visitor
  # source://tinygql//lib/tinygql/visitors.rb#38
  def handle_argument(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#61
  def handle_boolean_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#77
  def handle_directive(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#179
  def handle_directive_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#5
  def handle_document(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#155
  def handle_enum_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#200
  def handle_enum_type_extension(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#67
  def handle_enum_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#149
  def handle_enum_value_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#173
  def handle_executable_directive_location(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#42
  def handle_field(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#111
  def handle_field_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#55
  def handle_float_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#95
  def handle_fragment_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#91
  def handle_fragment_spread(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#85
  def handle_inline_fragment(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#161
  def handle_input_object_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#205
  def handle_input_object_type_extension(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#118
  def handle_input_value_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#52
  def handle_int_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#132
  def handle_interface_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#189
  def handle_interface_type_extension(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#25
  def handle_list_type(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#70
  def handle_list_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#18
  def handle_named_type(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#21
  def handle_not_null_type(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#64
  def handle_null_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#48
  def handle_object_field(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#125
  def handle_object_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#167
  def handle_object_type_extension(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#73
  def handle_object_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#9
  def handle_operation_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#101
  def handle_root_operation_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#144
  def handle_scalar_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#185
  def handle_scalar_type_extension(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#105
  def handle_schema_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#58
  def handle_string_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#81
  def handle_type_condition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#176
  def handle_type_system_directive_location(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#138
  def handle_union_type_definition(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#195
  def handle_union_type_extension(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#35
  def handle_value(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#15
  def handle_variable(obj); end

  # source://tinygql//lib/tinygql/visitors.rb#29
  def handle_variable_definition(obj); end
end
